<#@ template 
inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation"#> 
<#@ output extension=".smarthomediagram.groovy" #> 
<#@ HomeAutomationDesigner processor="HomeAutomationDesignerDirectiveProcessor"  
    requires="fileName='HomeAutomationDesigner1.smarthomediagram'" #>
<#@ Assembly Name="System.Core.dll" #> 
<#@ Import Namespace="System.Collections.Generic" #> 
<#@ Import Namespace="System.Linq" #> 
<# 
    //Global variables    
    var skilltypes = APIModel.Skills.GroupBy(k => k.MessageNamespace, v => v);
	var appliancetypes = APIModel.Appliances.GroupBy(k => k.Type, v => v);
#>


// APIModel name = <#= APIModel.Name #>
// Appliances count = <#= APIModel.Appliances.Count() #>
// Skills count = <#= APIModel.Skills.Count() #>
    

definition(
    name: "HTTP control/query cloud-connected devices App",
    namespace: "MDSE",
    author: "AP",
    description: "Creates HTTP control/query cloud-connected devices",
    category: "Convenience",
    iconUrl: "https://github.com/chancsc/icon/raw/master/standard-tile%401x.png",
    iconX2Url: "https://github.com/chancsc/icon/raw/master/standard-tile@2x.png",
    iconX3Url: "https://github.com/chancsc/icon/raw/master/standard-tile@3x.png",
    singleInstance: true,
    oauth: false)


preferences {
}

def installed() {
	log.info "Installed HTTP control/query with settings: ${settings}"
	initialize()
}

def updated() {
	log.info "Updated HTTP control/query with settings: ${settings}"
	unsubscribe()
	initialize()
}

def initialize() {
<#
	foreach (var item in APIModel.Appliances)
    {
		var index = APIModel.Appliances.IndexOf(item)+1;
		var uri = new Uri(item.URL);
		var domain = uri.Host;
		var path = uri.PathAndQuery;
		var type = item.Type.ToLower();
        WriteLine($"\tdef uri{index} = 'http://{domain}'");
		WriteLine($"\tdef path{index} = '{path}'");
		WriteLine($"\tdef childId{index} = '{item.ApplianceId}'");
		WriteLine($"\tdef existing{index} = getChildDevice(childId{index})");
		WriteLine($"\tif (!existing{index})");
		WriteLine("\t{");
		WriteLine($"\t\tdef childDevice{index} = addChildDevice('MDSE', 'device{index} handler', childId{index}, null, [name: childId{index}, label: '{item.Name}', data: [url: uri{index}, pathStr: path{index}]])");
		WriteLine($"\t\tchildDevice{index}.getInitialValue()");
		WriteLine("\t}");
    }
#>
}

def uninstalled() {
    removeChildDevices(getChildDevices())
}

private removeChildDevices(delete) {
    delete.each {
        deleteChildDevice(it.deviceNetworkId)
    }
}

<#
	foreach (var itemAppliance in APIModel.Appliances)
    {
		var index = APIModel.Appliances.IndexOf(itemAppliance)+1;
		var type = itemAppliance.Type.ToLower();
#>

// ******************************************** Handler for <#=itemAppliance.Name#> *******************************************************

metadata {
	definition (name: "device<#=index#> handler", namespace: "MDSE", author: "AP") {
    	attribute "state", "string"
		attribute "value", "number"
	<#
		foreach (var item in itemAppliance.Actions.Select(k => k.Skill)) {
			WriteLine($"\tcommand '{item.Name}'");
		}
	#>
		}

	// simulator metadata
	simulator {
	}

<#
	if (type == "bulb") {
#>
	// UI tile definitions
	tiles(scale: 2) {
		standardTile("MainTile", "device.state", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: 'Light is ${currentValue}', icon: "st.switches.light.off", backgroundColor: "#ffffff"
            state "on", label: 'Light is ${currentValue}', icon: "st.switches.light.on", backgroundColor: "#00a0dc"
        }
<#
	}
#>

<#
	if (type == "thermo") {
#>
	// UI tile definitions
	tiles(scale: 2) {
		standardTile("MainTile", "device.value", width: 2, height: 2) {
			state "default", label: '${currentValue}Â°', icon: "st.alarm.temperature.normal", backgroundColors:[
					[value: -10, color: "#800080"],//purple
					[value: 0, color: "#0000ff"], //blue
					[value: 25, color: "#00ff00"],//green
					[value: 35, color: "#ffff00"],//yellow
					[value: 45, color: "#ffa500"],//orange			
					[value: 60, color: "#ff0000"]//red
			]
		}
<#
	}
#>

	<#
		var str = $"";
		foreach (var item in itemAppliance.Actions.Select(k => k.Skill)) {
			if (type == "bulb") {
				str += $", '{item.Name}'";
				if (item.Name.ToLower().StartsWith("set")) {
					WriteLine($"\tcontrolTile('{item.Name}', 'device.value', 'slider', width: 4, height: 2, inactiveLabel: false, range:'(-100..100)')");
					WriteLine("\t{");
					WriteLine($"\t\tstate 'default', label: '{item.Name}', action: '{item.Name}'");
					WriteLine("\t}");
				}
				else {
					WriteLine($"\tstandardTile('{item.Name}', 'device.state', width: 2, height: 2, canChangeIcon: true)");
					WriteLine("\t{");
					WriteLine($"\t\tstate 'default', label: '{item.Name}', action: '{item.Name}', icon: 'st.sonos.play-icon', backgroundColor: '#ffffff'");
					WriteLine("\t}");
				}
			}
			if (type == "thermo") {
				str += $", '{item.Name}'";
				if (item.Name.ToLower().StartsWith("set")) {
					WriteLine($"\tcontrolTile('{item.Name}', 'device.value', 'slider', width: 4, height: 2, inactiveLabel: false, range:'(-100..100)')");
					WriteLine("\t{");
					WriteLine($"\t\tstate 'default', label: '{item.Name}', action: '{item.Name}'");
					WriteLine("\t}");
				}
				else {
					WriteLine($"\tstandardTile('{item.Name}', 'device.value', width: 2, height: 2, canChangeIcon: true)");
					WriteLine("\t{");
					WriteLine($"\t\tstate 'default', label: '{item.Name}', action: '{item.Name}', icon: 'st.sonos.play-icon', backgroundColor: '#ffffff'");
					WriteLine("\t}");
				}
			}
		}
	#>
        main "MainTile"
        	details (["MainTile" <#=str#>])
		
	}    
}

def getInitialValue(){
	log.info "Executing getInitialValue"
	executeCommand("Query", "GetInitialValue", "GetInitialValueRequest", "")
}

<#
	foreach (var item in itemAppliance.Actions.Select(k => k.Skill)) {
		if (item.MessageNamespace == "Control") {
			WriteLine($"\tdef {item.Name}(def arg)");
			WriteLine("\t{");
			WriteLine($"\t\texecuteCommand('{item.MessageNamespace}', '{item.Action.Name}', '{item.MessageName}', arg)");
			WriteLine("\t}");
		} else {
			WriteLine($"\tdef {item.Name}()");
			WriteLine("\t{");
			WriteLine($"\t\texecuteCommand('{item.MessageNamespace}', '{item.Action.Name}', '{item.MessageName}', '')");
			WriteLine("\t}");
		}	
	}
#>

private void executeCommand(String method, String act, String cmd, def val){
    def httpInfo = [
        uri: device.getDataValue("url"),
        path: device.getDataValue("pathStr")
	]
    
    try{
    	if (method == "Control") {
        	httpInfo.body = [ id : device.getName(), CallerIdentifier: "smartthing", name:cmd, action:act, messageid: "8ABF9885-B386-443D-8ABA-01EA780199FD", value: val ]
            log.debug httpInfo
            httpPost(httpInfo) { resp ->
                sendEvent(name: "state", value : resp.data.payload.state)
                sendEvent(name: "value", value : resp.data.payload.value)
            }
        }
        else {
        	httpInfo.query = [ id : device.getName(), CallerIdentifier: "smartthing", name:cmd, action:act, messageid: "8ABF9885-B386-443D-8ABA-01EA780199FD" ]
            log.debug httpInfo
            httpGet(httpInfo) { resp ->
                sendEvent(name: "state", value : resp.data.payload.state)
                sendEvent(name: "value", value : resp.data.payload.value)
            }
        }
    } catch (e) {
        log.error "Error creating device: ${e}"
    }
}
<#
	}
#>
